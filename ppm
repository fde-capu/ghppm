#!/usr/bin/env python3

import os
import sys
import argparse
import configparser

g_config_names = ['user.name', 'user.email']
g_config_file_path = os.path.expanduser('~/.ppm.conf')

config = configparser.ConfigParser()

def create_parser():
	parser = argparse.ArgumentParser(description="Personal Package Manager.")
	parser.add_argument(
		'--config',
		action='extend', type=str, nargs='*',
		help="user.name: set GitHub user name."
	)
	return parser

def save_config():
	with open(g_config_file_path, 'w') as configfile:
		config.write(configfile)

def load_configs():
	global config
	if not os.path.exists(g_config_file_path):
		config['ppm'] = {}
		save_config()
	else:
		config.read(g_config_file_path)
	save_again = False
	for conf in g_config_names:
		if not config.has_option('ppm', conf):
			config['ppm'][conf] = ''
			save_again = True
	if save_again:
		save_config()

def is_config(gopt):
	return config.has_option('ppm', gopt)

def show_conf(conf):
	print(f'{conf}: {config["ppm"][conf]}')

def show_all_configs():
	for conf in g_config_names:
		show_conf(conf)

def is_get_global(i, glist):
	if not is_config(glist[i]):
		return False
	if i == len(glist) - 1:
		return glist[i]
	if is_config(glist[i + 1]):
		return glist[i]
	return False

def is_set_global(i, glist):
	if is_get_global(i, glist):
		return False
	if is_config(glist[i]):
		return glist[i + 1]
	return False

def parse_arguments(parser):
	args = parser.parse_args()
	conf_skip = False
	if args.config == []:
		show_all_configs()
	if args.config:
		for i, conf in enumerate(args.config):
			if conf_skip:
				conf_skip = False
				continue
			conf_skip = False
			if is_get_global(i, args.config):
				show_conf(conf)
			elif is_set_global(i, args.config):
				config["ppm"][conf] = args.config[i + 1]
				conf_skip = True
				print(f'{conf} set to {config["ppm"][conf]}.')
				save_config()
			else:
				parser.error(f'Unknown option: \'{conf}\'.')
#		print(args)
#		print(args.config)

	# Use the parsed arguments
#	if args.input_file:
#		print(f"Input file: {args.input_file}")
#	if args.output:
#		print(f"Output file: {args.output}")
#	if args.mode:
#		print(f"Mode: {args.mode}")
#	if args.list:
#		print(f"List: {args.list}")
#	print(f"Default: {args.default}")
#	if args.verbose:
#		print("Verbose mode is on")

def main():
	load_configs()
	parser = create_parser()
	parse_arguments(parser)
	sys.exit()

if __name__ == "__main__":
	main()
