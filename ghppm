#!/usr/bin/env python3

import os
import sys
import argparse
import configparser
import pdb
import subprocess
import tempfile
import shutil
import json

g_config_names = ['user.name', 'user.email']
g_config_file_path = os.path.expanduser('~/.ghppm.conf')
g_commands = ['list', 'install', 'reinstall', 'remove', 'update', 'upgrade', 'edit-sources']
g_source_list = 'sources.ghppm'
g_aways_ignore = ['.git', 'README']
g_cache_file = 'cache.ghppm'

config = configparser.ConfigParser()
g_source_list = os.path.join(os.getcwd(), g_source_list)
g_cache_file = os.path.join(os.getcwd(), g_cache_file)

def file_shooting(file):
	if any(excluded_string in file for excluded_string in g_aways_ignore):
		return False
	return True

def update_single(sshUrl):
	target_dir = os.getcwd()
	with tempfile.TemporaryDirectory() as temp_dir:
		clone_command = ['git', 'clone', sshUrl, temp_dir]
		print(sshUrl, end = ' ', flush = True)
		subprocess.run(clone_command, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
		allfiles = [os.path.join(root, filename) for root, directories, filenames in os.walk(temp_dir) for filename in filenames]
		filtered_files = [os.path.basename(file) for file in allfiles if file_shooting(file)]
		print('done.')
		return filtered_files

# $ gh repo list fde-capu --source -L 2000 --json description --json name --json owner --json pushedAt --json sshUrl --json updatedAt --json url

def update():
	global g_info
	json_elements = ['name', 'description', 'owner', 'pushedAt', 'updatedAt', 'sshUrl', 'url']
	retrieve_command = ['gh', 'repo', 'list', config['ghppm']['user.name'], '--source', '-L', '2000']
	for element in json_elements:
		retrieve_command.extend(['--json', element])
	print(retrieve_command)
	g_info = subprocess.run(retrieve_command, check=True)
	print(g_info)
	sys.exit()
	for source in g_sources:
		g_info.append({
			'sshUrl': source,
			'file': update_single(source)
		})

def save_cache():
	with open(g_cache_file, 'w') as f:
		json.dump(g_info, f)

def load_cache():
	global g_info
	g_info = []
	if not os.path.exists(g_cache_file):
		print(f"Cache '{g_cache_file}' is empty.")
		return
	with open(g_cache_file, 'r') as f:
		g_info = json.load(f)

def pretty_print_repo_info():
	if not len(g_info):
		return
	for j, repo in enumerate(g_info):
		print(f"{repo['sshUrl']}:")
		print(" ", end = '')
		for i, file in enumerate(repo['file']):
			print(file, end = '')
			if i < len(repo['file']) - 1:
				print(', ', end = '')
			else:
				print()

def parse_source(file):
	global g_sources
	content = file.read().strip()
	g_sources = ['git@github.com:' + config['ghppm']['user.name'] + '/' + source.strip() for source in content.split('\n') if source.strip() and source.strip()[0] != '#']

def load_sources():
	global g_sources
	if not os.path.exists(g_source_list):
		print(f"Sources '{g_source_list}' are empty.")
		g_sources = []
		return
	with open(g_source_list, 'r') as file:
		parse_source(file)

def create_parser():
	parser = argparse.ArgumentParser(description="GitHub Personal Package Manager.")
	parser.add_argument(
		'command',
		choices=g_commands,
		nargs='?',
		help=f'The command to run.'
	)
	parser.add_argument(
		'--config',
		action='extend', type=str, nargs='*',
		help="user.name: set GitHub user name."
	)
	return parser

def save_config():
	with open(g_config_file_path, 'w') as configfile:
		config.write(configfile)

def load_configs():
	global config
	if not os.path.exists(g_config_file_path):
		config['ghppm'] = {}
		save_config()
	else:
		config.read(g_config_file_path)
	save_again = False
	for conf in g_config_names:
		if not config.has_option('ghppm', conf):
			config['ghppm'][conf] = ''
			save_again = True
	for key in config.options('ghppm'):
		if not key in g_config_names:
			config.remove_option('ghppm', key)
			save_again = True
	if save_again:
		save_config()

def is_config(gopt):
	return config.has_option('ghppm', gopt)

def show_conf(conf):
	print(f'{conf}: {config["ghppm"][conf]}')

def show_all_configs():
	for conf in g_config_names:
		show_conf(conf)

def is_get_global(i, glist):
	if not is_config(glist[i]):
		return False
	if i == len(glist) - 1:
		return glist[i]
	if is_config(glist[i + 1]):
		return glist[i]
	return False

def is_set_global(i, glist):
	if not glist[i] in g_config_names:
		return False
	if is_get_global(i, glist):
		return False
	if is_config(glist[i]):
		return glist[i + 1]
	return False

def parse_arguments(parser):
	args = parser.parse_args()
	conf_skip = False
	if args.config == []:
		show_all_configs()
	if args.config:
		for i, conf in enumerate(args.config):
			if conf_skip:
				conf_skip = False
				continue
			conf_skip = False
			if is_get_global(i, args.config):
				show_conf(conf)
			elif is_set_global(i, args.config):
				config["ghppm"][conf] = args.config[i + 1]
				conf_skip = True
				print(f'{conf} set to {config["ghppm"][conf]}.')
				save_config()
			else:
				parser.error(f'Unknown option: \'{conf}\'.')
	if args.command:
		print(f'Got command {args.command}.')
		if args.command == 'list':
			load_cache()
			pretty_print_repo_info()
		if args.command == 'update':
			load_sources()
			update()
			save_cache()
#		print(args)
#		print(args.config)

	# Use the parsed arguments
#	if args.input_file:
#		print(f"Input file: {args.input_file}")
#	if args.output:
#		print(f"Output file: {args.output}")
#	if args.mode:
#		print(f"Mode: {args.mode}")
#	if args.list:
#		print(f"List: {args.list}")
#	print(f"Default: {args.default}")
#	if args.verbose:
#		print("Verbose mode is on")

def main():
	load_configs()
	parser = create_parser()
	parse_arguments(parser)
	sys.exit()

if __name__ == "__main__":
	main()
